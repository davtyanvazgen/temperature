{"version":3,"sources":["components/form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","onSubmit","weatherMethod","TextField_default","variant","type","name","placeholder","Weather","data","city","country","Math","floor","temp","concat","pressure","lost","message","charAt","toUpperCase","slice","apiKEY","App","state","undefined","sunset","getCity","_callee","e","err","api_url","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","test","fetch","sent","json","console","log","_this","setState","main","sys","t0","stop","this","components_form","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ca18b67.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <div>\r\n      <h3 className=\"title\">Weather in your city</h3>\r\n      <div className=\"formContainer\">\r\n        <form onSubmit={props.weatherMethod}>\r\n          <TextField\r\n            className=\"textfield\"\r\n            variant=\"outlined\"\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"enter city\"\r\n          />\r\n          <button className=\"input\">Find</button>\r\n          {/* <Button\r\n            onClick={props.weatherMethod}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Find\r\n          </Button> */}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction Weather(props) {\r\n  return (\r\n    <div className=\"weatherContainer\">\r\n      {props.data.city && (\r\n        <div>\r\n          <p className=\"p\">\r\n            City: {props.data.city} ({props.data.country})\r\n          </p>\r\n          <p className=\"p\">\r\n            Temperature:{\" \"}\r\n            {Math.floor(props.data.temp) >= 0\r\n              ? `+${Math.floor(props.data.temp)} ºC`\r\n              : `${Math.floor(props.data.temp)} ºC`}\r\n          </p>\r\n          <p className=\"p\">Pressure: {props.data.pressure}</p>\r\n        </div>\r\n      )}\r\n      {props.data.lost && (\r\n        <p className=\"p_warning\">\r\n          {props.data.lost.message.charAt(0).toUpperCase() +\r\n            props.data.lost.message.slice(1)}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Form from \"./components/form.jsx\";\nimport Weather from \"./components/weather.jsx\";\nimport \"./App.css\";\n\nconst apiKEY = \"e761b2bcc5025d319d9ee25a46e023cf\";\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    lost: undefined\n  };\n\n  getCity = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    let err;\n    if (/\\S/.test(city)) {\n      try {\n        const api_url = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKEY}&units=metric`\n        );\n        const data = await api_url.json();\n        console.log(data);\n        err = data;\n\n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          lost: undefined\n        });\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          city: undefined,\n          lost: err\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Form weatherMethod={this.getCity} />\n        <Weather data={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}